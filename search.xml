<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>maven基础学习笔记回顾</title>
      <link href="/LKFhnust18/2023/06/09/maven%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/"/>
      <url>/LKFhnust18/2023/06/09/maven%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="maven基础学习笔记回顾"><a href="#maven基础学习笔记回顾" class="headerlink" title="maven基础学习笔记回顾"></a>maven基础学习笔记回顾</h1><h2 id="一、为什么学习Maven"><a href="#一、为什么学习Maven" class="headerlink" title="一、为什么学习Maven?"></a>一、为什么学习Maven?</h2><p>1.Maven作为依赖管理工具<br>①jar包的规模<br>在javaWeb阶段也用到jar包，不过基本上主要还是用原生api开发，没有经过框架封装整合。随着我们使用越来越多的框架，项目中的jar包也越来越多。<br>②jar包的来源</p><ul><li>jar包所属的技术的网站，网站通常是英文界面，网站的结构又不尽相同，甚至找到下载链接还发现需要通过特殊的工具下载</li><li>第三方网站提供下载。问题是不规范，在使用过程中会出现各种问题。<ul><li>jar包的名称</li><li>jar包的版本</li><li>jar包内的具体细节</li></ul></li><li>而使用maven后，依赖对应的包能自动下载，方便，快捷又规范。<br>2.Maven作为构建管理工具<br>一个主要的原因就是脱离了IDE环境任需要构建，在部署到远程端时，不可能在远程端也下载一个IDE；其次互联网的更新非常平凡，经常有新功能要去发布。常见的部署过程如下；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/20230609170644.png" alt="img"></p><h2 id="二、什么是Maven"><a href="#二、什么是Maven" class="headerlink" title="二、什么是Maven?"></a>二、什么是Maven?</h2><p>Maven是Apache软件基金会组织维护的一款专门为Java项目提供构建和依赖管理支持的工具。</p><h3 id="1-构建"><a href="#1-构建" class="headerlink" title="1.构建"></a>1.构建</h3><p>java项目开发过程中，构建指的是使用[原材料生产产品]的过程。</p><ul><li><p>原材料</p><ul><li>java源代码</li><li>基于HTML的Thymeleaf文件</li><li>图片</li><li>配置文件</li><li>……</li></ul></li><li><p>产品</p><ul><li>一个可以在服务器上运行的项目</li></ul></li></ul><p>构建过程包含的主要的环节：</p><ul><li>删除上一次构建的结果，为下一次构建做好准备</li><li>编译：java源程序编译成**.class**字节码文件</li><li>测试：运行提前准备好的测试程序</li><li>报告：针对刚才测试的结果生成一个全面的信息</li><li>打包：<ul><li>Java工具：jar包</li><li>Web工程：war包</li></ul></li><li>安装：把一个Maven工程经过打包操作生成的jar包或War包安装到Maven仓库</li><li>部署：将准备好的jar包或war包部署到服务器上运行。</li></ul><h3 id="2-依赖"><a href="#2-依赖" class="headerlink" title="2.依赖"></a>2.依赖</h3><p>如果A工程用到了B工程的类、接口、配置文件这样的资源，那么我们就可以说A依赖于B，例如：</p><ul><li>junit-4.12依赖hamcrest-core-1.3</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github+picgo搭建markdown图床</title>
      <link href="/LKFhnust18/2023/02/28/github-picgo%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A/"/>
      <url>/LKFhnust18/2023/02/28/github-picgo%E6%90%AD%E5%BB%BAmarkdown%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="github-picgo-搭建-markdown-图床"><a href="#github-picgo-搭建-markdown-图床" class="headerlink" title="github+picgo 搭建 markdown 图床"></a>github+picgo 搭建 markdown 图床</h2><h3 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h3><h4 id="建立一个仓库，必须为public"><a href="#建立一个仓库，必须为public" class="headerlink" title="建立一个仓库，必须为public"></a>建立一个仓库，必须为public<img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/0fd86a83fba973b7425530a4f2ec42dc.png"></h4><h4 id="获取tokens"><a href="#获取tokens" class="headerlink" title="获取tokens"></a>获取tokens</h4><ul><li><p>进入个人设置页面，依次选择<code>developer settings</code> –&gt; <code>Personal access tokens</code>，然后点击<code>Generate new token</code>，来生成新的<strong>tokens</strong>，<strong>tokens</strong>也就是令牌，在图床上传时验证身份用的。</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/841c2e32b899008fe669660dd48c8482.png"></p></li><li><p>添加描述，把<strong>repo</strong>选上。</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/844576182d07e155d1ac326bbd94357b.png"></p></li><li><p>保存生成的字符串</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/2eff0418ce953cef4c970df24c2a4023.png"></p></li></ul><h3 id="picgo配置"><a href="#picgo配置" class="headerlink" title="picgo配置"></a>picgo配置</h3><h4 id="pico-插件"><a href="#pico-插件" class="headerlink" title="pico 插件"></a>pico 插件</h4><ul><li><p>首先，要借助<strong>vscode</strong>，在 <strong>vscode</strong> 中点击扩展(快捷鍵<code>crtrl</code>+<code>shift</code>+<code>X</code>)，搜索picgo安装下载<img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/3332.png" alt="picgo插件"></p></li><li><p>在设置中配置<strong>picgo</strong>，在vscode设置界面搜索picgo，具体的配置如下：</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/Snipaste_2023-02-28_16-40-02.png"></p><ul><li><p><strong>Current</strong>设置<strong>GitHub</strong>，</p></li><li><p><strong>Branch</strong>就是仓库分支，默认设置<strong>main</strong>，</p></li><li><p><strong>custom url</strong>就是我们仓库的分支，这里有两种方式可以使用：</p><ol><li><p>原生方式，弊端就是国内的访问速度比较慢</p><p>使用GitHub原生链接，格式为：<a href="https://raw.githubusercontent.com/[%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]/[%E5%88%86%E6%94%AF%E5%90%8D]">https://raw.githubusercontent.com/[用户名]/[仓库名]/[分支名]</a></p><p>eg：<a href="https://raw.githubusercontent.com/LKFhnust18/picgo/main">https://raw.githubusercontent.com/LKFhnust18/picgo/main</a></p></li><li><p>cdn加速方式，国内的访问速度比较快</p><p>格式为：<a href="https://cdn.jsdelivr.net/gh/[%E7%94%A8%E6%88%B7%E5%90%8D]/[%E4%BB%93%E5%BA%93%E5%90%8D]@[%E5%88%86%E6%94%AF%E5%90%8D]">https://cdn.jsdelivr.net/gh/[用户名]/[仓库名]@[分支名]</a></p><p>eg：<a href="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main">https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main</a></p></li></ol></li><li><p><strong>path</strong>就是我们的图片存储在仓库中的路径，eg：img&#x2F;</p></li><li><p><strong>repo</strong>就是我们的仓库</p></li><li><p><strong>Token</strong>，即GitHub中获取的Tokens</p></li></ul></li><li><p>上传方式：进入vscode，在你想要复制的地方使用快捷键【<code>ctrl+alt+U</code>】从剪贴板上粘贴图片，[<code>ctrl</code>+<code>alt</code>+<code>U</code>]打开资源管理器，选择图片上传。</p></li></ul><h4 id="picgo（app"><a href="#picgo（app" class="headerlink" title="picgo（app)"></a>picgo（app)</h4><p>这个可以结合<strong>Typora</strong>使用，下面是picgo的具体配置图</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/Snipaste_2023-02-28_16-44-34.png"></p><p>在typora中的配置图</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/Snipaste_2023-02-28_16-46-33.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装node.js和npm</title>
      <link href="/LKFhnust18/2023/02/28/Ubuntu%E5%AE%89%E8%A3%85node-js%E5%92%8Cnpm/"/>
      <url>/LKFhnust18/2023/02/28/Ubuntu%E5%AE%89%E8%A3%85node-js%E5%92%8Cnpm/</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu安装node-js和npm"><a href="#Ubuntu安装node-js和npm" class="headerlink" title="Ubuntu安装node.js和npm"></a>Ubuntu安装node.js和npm</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Node.js是一个跨平台的JavaScript运行环境，它构建在 为了服务器端运行JavaScript代码而设计的Chrome JavaScript上，它通常被用来构建后端应用，但它是非常流行的全栈和前端解决方案。npm是node.js的默认包管理工具，也是世界上最大的软件仓库。下面记录Ubuntu安装node.js和npm三种不同的方式。</p><h3 id="从Ubuntu软件源安装node-js和npm"><a href="#从Ubuntu软件源安装node-js和npm" class="headerlink" title="从Ubuntu软件源安装node.js和npm"></a>从Ubuntu软件源安装node.js和npm</h3><ul><li>更新软件包索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><ul><li>安装node.js和npm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install node.js npm   #这一条命令会自动安装一系列包，包括编译和安装npm的本地扩展</span><br></pre></td></tr></table></figure><ul><li>验证是否安装成功</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node.js -version#查看node.js的版本</span><br><span class="line">npm -version #查看npm的版本</span><br></pre></td></tr></table></figure><h3 id="从NodeSource中安装Node-js和npm"><a href="#从NodeSource中安装Node-js和npm" class="headerlink" title="从NodeSource中安装Node.js和npm"></a>从NodeSource中安装Node.js和npm</h3><p>NodeSource是一家公司，提供企业级的Node支持。它维护了一个APT软件源，其中包含了很多node.js版本。如果你的应用需要制定版本的Node.js版本，就可以使用这个软件源。比如这里我们安装14.x的node.js版本：</p><ul><li>以sudo用户的身份运行下面的命令，运行安装NodeSource的安装脚本。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_14.X | sudo -E bash -</span><br></pre></td></tr></table></figure><p>这个脚本会添加NodeSource的签名key到你的系统，创建一个apt源文件，安装必备的软件包，并刷新apt缓存。</p><ul><li>NodeSource源启动成功后，安装node.js和npm</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install node.js#这个nide.js安装包同时包含node.js和npm</span><br></pre></td></tr></table></figure><ul><li>验证Node.js和npm是否正常安装，打印它们的版本号：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure><p>如果想从npm编译本地扩展，你需要安装开发工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install build-essential</span><br></pre></td></tr></table></figure><h3 id="从NVM安装node-js和npm"><a href="#从NVM安装node-js和npm" class="headerlink" title="从NVM安装node.js和npm"></a>从NVM安装node.js和npm</h3><p>NVM（Node Version Manger）是一个Bash脚本，它允许你为每一个用户管理多个Node.js版本。使用NVM，你可以随时安装或者卸载任何想要的使用或者测试的Node.js版本</p><ul><li>浏览nvm页面，并且拷贝下面的curl或者wget命令去下载和nvm版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</span><br></pre></td></tr></table></figure><p>不要使用sudo运行，因为root用户会启用nvm</p><ul><li>验证nvm是否被正确安装，输入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm --version</span><br></pre></td></tr></table></figure><ul><li>获取node.js版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure><ul><li>安装node</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm install node#安装最新版的node</span><br><span class="line">nvm install --lts#安装最新的长期版本node</span><br><span class="line">nvm install 10.9.0#安装版本10.9.0</span><br></pre></td></tr></table></figure><ul><li>输出已安装的node版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><ul><li>修改当前使用的版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 12.16.3</span><br></pre></td></tr></table></figure><ul><li>修改默认的node.js版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm alias default 12.16.3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim快速入门</title>
      <link href="/LKFhnust18/2023/02/12/vim%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/LKFhnust18/2023/02/12/vim%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="vim快速入门"><a href="#vim快速入门" class="headerlink" title="vim快速入门"></a>vim快速入门</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Linux内置vi文本编辑器，而vim可以看成vi的增强版。它的代码补充、编译以及错误跳转等方便编程的功能非常丰富。vi和vim有三种模式：</p><ul><li>正常模式</li><li>插入模式</li><li>命令行模式</li></ul><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>用vim打开一个文件就直接进入一般模式了（就是默认模式），在这个模式中你可以使用【<code>上下左右</code>】按键来移动光标，也可以使用【<code>删除字符</code>】或者【<code>删除整行</code>】来处理文档，也可以使用复制粘贴来处理你的文档。</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/67tool.gif" alt="正常模式"></p><h3 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h3><p>按下<code>i</code>、<code>I</code>、<code>o</code>、<code>O</code>、<code>a</code>、<code>A</code>、<code>r</code>、<code>R</code>等任意一个字母之后才会进入编辑模式，一般来说按<strong>i</strong>即可。</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/Snipaste_2023-03-02_17-13-02.png" alt="插入模式"></p><h3 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h3><p>在这个模式中，可以提供你相关指令、完成读取、存盘、替补、离开vim、显示行号等级别</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/Snipaste_2023-03-02_16-25-10%20.png" alt="命令行模式"></p><h3 id="vi和vim的各个模式之间的切换"><a href="#vi和vim的各个模式之间的切换" class="headerlink" title="vi和vim的各个模式之间的切换"></a>vi和vim的各个模式之间的切换</h3><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/vim-vi.png" alt="vi和vim的各个模式切换图"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux的目录结构</title>
      <link href="/LKFhnust18/2023/02/10/linux%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
      <url>/LKFhnust18/2023/02/10/linux%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p>Linux采用的是极层式的树状目录结构，在此结构中最上层的是根目录“&#x2F;”，然后在此目录下再创建其他的目录。Linux中有一句话：在Linux的世界里面，一切皆文件。</p><p>具体的目录结构如下</p><h3 id="x2F-bin"><a href="#x2F-bin" class="headerlink" title="&#x2F;bin"></a>&#x2F;bin</h3><p>[常用]（&#x2F;usr&#x2F;bin、&#x2F;usr&#x2F;local&#x2F;bin），bin是Binary的缩写，这个目录存放着经常使用的命令。</p><h3 id="x2F-sbin"><a href="#x2F-sbin" class="headerlink" title="&#x2F;sbin"></a>&#x2F;sbin</h3><p>(&#x2F;usr&#x2F;sbin、usr&#x2F;local&#x2F;sbin)，s就是super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><h3 id="x2F-home"><a href="#x2F-home" class="headerlink" title="&#x2F;home"></a>&#x2F;home</h3><p>[常用]存放普通用户的主目录，在 Linux中每一个用户都有一个自己的一个自己的目录，一般目录是以用户的账号名命名。</p><h3 id="x2F-root"><a href="#x2F-root" class="headerlink" title="&#x2F;root"></a>&#x2F;root</h3><p>该目录为系统管理员，也称作超级用户权限者的用户主目录。</p><h3 id="x2F-etc"><a href="#x2F-etc" class="headerlink" title="&#x2F;etc"></a>&#x2F;etc</h3><p>[常用]所需的系统所需要的配置文子目录my.conf</p><h3 id="x2F-usr"><a href="#x2F-usr" class="headerlink" title="&#x2F;usr"></a>&#x2F;usr</h3><p>[常用]这是个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与widows下的program files目录。</p><h3 id="x2F-usr-x2F-local"><a href="#x2F-usr-x2F-local" class="headerlink" title="&#x2F;usr&#x2F;local"></a>&#x2F;usr&#x2F;local</h3><p>这是给主机额外安装软件所安装的目录，一般是通过编译源码的方式安装的程序。</p><h3 id="x2F-boot"><a href="#x2F-boot" class="headerlink" title="&#x2F;boot"></a>&#x2F;boot</h3><p>[常用]存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><h3 id="x2F-proc"><a href="#x2F-proc" class="headerlink" title="&#x2F;proc"></a>&#x2F;proc</h3><p>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</p><h3 id="x2F-srv"><a href="#x2F-srv" class="headerlink" title="&#x2F;srv"></a>&#x2F;srv</h3><p>service缩写，该目录存放的是一些服务启动之后需要提取的数据。</p><h3 id="x2F-sys"><a href="#x2F-sys" class="headerlink" title="&#x2F;sys"></a>&#x2F;sys</h3><p>这是linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs</p><h3 id="x2F-tmp"><a href="#x2F-tmp" class="headerlink" title="&#x2F;tmp"></a>&#x2F;tmp</h3><p>这个目录是用来存放一些临时文件</p><h3 id="x2F-dev"><a href="#x2F-dev" class="headerlink" title="&#x2F;dev"></a>&#x2F;dev</h3><p>类似于Windows下的设备管理器，会把所有的硬件用文件的形式存储</p><h3 id="x2F-media"><a href="#x2F-media" class="headerlink" title="&#x2F;media"></a>&#x2F;media</h3><p>Linux会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下</p><h3 id="x2F-mnt"><a href="#x2F-mnt" class="headerlink" title="&#x2F;mnt"></a>&#x2F;mnt</h3><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在&#x2F;mnt&#x2F;上，然后就可以进入该目录就可以查看里面的内容了。</p><h3 id="x2F-opt"><a href="#x2F-opt" class="headerlink" title="&#x2F;opt"></a>&#x2F;opt</h3><p>这是给主机额外安装软件所摆放的目录，如安装oracle数据库就可放到该目录下面。默认为空。</p><h3 id="x2F-var"><a href="#x2F-var" class="headerlink" title="&#x2F;var"></a>&#x2F;var</h3><p>习惯将被修改的目录放在这个目录下，包括各种日志文件</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git命令简洁版总结</title>
      <link href="/LKFhnust18/2023/02/02/git%E5%91%BD%E4%BB%A4%E7%AE%80%E6%B4%81%E7%89%88%E6%80%BB%E7%BB%93/"/>
      <url>/LKFhnust18/2023/02/02/git%E5%91%BD%E4%BB%A4%E7%AE%80%E6%B4%81%E7%89%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="git-命令简洁版总结"><a href="#git-命令简洁版总结" class="headerlink" title="git 命令简洁版总结"></a>git 命令简洁版总结</h2><p>这里写一个汇总，用到就记录，反复修改，记录一些常见的 git 命令，方便自己反复浏览，[ ]表示参数。</p><h3 id="git-配置"><a href="#git-配置" class="headerlink" title="git 配置"></a>git 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;#设置提交代码的用户名</span><br><span class="line">git config --global user.email &quot;exmail@example.com&quot;#设置提交代码的邮箱</span><br><span class="line">git config -l 查看当前git环境详细配置</span><br><span class="line">git config --global --list #查看当前用户配置</span><br><span class="line">git config --local --list 查看当前仓库配置信息</span><br></pre></td></tr></table></figure><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><h4 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init #在当前目录新建一个仓库</span><br><span class="line">git init [repository name]#在指定目录下创建一个新仓库。</span><br></pre></td></tr></table></figure><h3 id="新建文件添加本地仓库"><a href="#新建文件添加本地仓库" class="headerlink" title="新建文件添加本地仓库"></a>新建文件添加本地仓库</h3><h3 id="添加到缓存区"><a href="#添加到缓存区" class="headerlink" title="添加到缓存区"></a>添加到缓存区</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [filename/./--all]#填写filename，指定添加某个文件；git add .则是添加所有文件,但是不会记录删除操作；--all会记录删除操作，如如你在本地删除了xxx.md 这个命令会把删除信息也记录进去，然后在提交的时候把仓库里对应的xxx.md也删除掉，也就是说你在本地做的删除操作会被记录，提交仓库时会删除同样的文件。</span><br></pre></td></tr></table></figure><h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;info&quot; #在提交时我们需要描述一下我们做了什么，info就是我们描述的信息</span><br></pre></td></tr></table></figure><h3 id="查看历史提交日志"><a href="#查看历史提交日志" class="headerlink" title="查看历史提交日志"></a>查看历史提交日志</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline 将日志缩写为单行显示</span><br><span class="line">git log filename #查看指定文件的日志</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit 查看分支合并情况</span><br><span class="line">git log --oneline --decorate --graph --all 查看分叉历史，包括：提交历史、各个分支的指向以及项目的分支分叉情况。</span><br><span class="line">git log -3 查看最新3条commit日志数据</span><br><span class="line">git reflog 显示操作本地版本库的命令，包括commit和reset等，在回退版本以后又后悔找不到commit id了可以使用此命令查看历史</span><br></pre></td></tr></table></figure><h3 id="回滚代码仓库-git-reset"><a href="#回滚代码仓库-git-reset" class="headerlink" title="回滚代码仓库 git reset"></a>回滚代码仓库 git reset</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard #reset是重置命令，--hard是重置代码仓库版本。这里有几种表述方式</span><br><span class="line">#1.填写哈希id，这个哈希id可以在输入git log的时候去看</span><br><span class="line">#2.回滚当前仓库指向的版本，这里有两个表达，一个是HEAD^，返回到当前仓库的上个版本；另外一个是HEAD~num，num是数字，表示以当前版本为基数，回滚num次。</span><br></pre></td></tr></table></figure><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git status#查看所有文件状态，A：未修改AM：修改 Untracked：未提交 modified：新文件，但未提交</span><br><span class="line">git status [file-name] #查看指定文件状态</span><br><span class="line">git diff HEAD -- #查看最新本地版本库和工作区所有文件的区别</span><br><span class="line">git diff HEAD -- [file-name] #查看最新本地版本库和工作区文件的却别</span><br><span class="line">git diff HEAD^ -- [file-name] #查看本地上一个版本和工作区文件的却别</span><br><span class="line">git diff [local branch] origin/[remote branch] #比较本地分支和远程分支的区别</span><br></pre></td></tr></table></figure><h3 id="撤回最近一次修改的状态"><a href="#撤回最近一次修改的状态" class="headerlink" title="撤回最近一次修改的状态"></a>撤回最近一次修改的状态</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- file</span><br></pre></td></tr></table></figure><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone [url] #用于通过指定的url获取一个代码库</span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm [file] #删除工作目录中的文件，并将删除操作添加到stage</span><br></pre></td></tr></table></figure><h3 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show [commit]#显示指定提交的元数据以及内容变更</span><br></pre></td></tr></table></figure><h3 id="分支常用命令"><a href="#分支常用命令" class="headerlink" title="分支常用命令"></a>分支常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git branch#将会显示当前代码库中所有的本地分支</span><br><span class="line">git branch -r#列出所有远程分支：</span><br><span class="line">git branch 新分支名#新建分支，但还处于当前分支下</span><br><span class="line">git checkout -b 新分支名#新建分支并跳转到该分支下</span><br><span class="line">git merge 新分支名#合并指定分支到当前分支：</span><br><span class="line">git branch -d 分支名#删除分支：</span><br><span class="line">git push origin --delete 分支名#删除远程分支：</span><br></pre></td></tr></table></figure><h2 id="Git-连接到-GitHub"><a href="#Git-连接到-GitHub" class="headerlink" title="Git 连接到 GitHub"></a>Git 连接到 GitHub</h2><p>1.生成 ssh 密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;</span><br></pre></td></tr></table></figure><p>2.验证是否连接成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>3.将本地的仓库连接到远程的 GitHub 仓库（如果有本地仓库）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:username/rep.git</span><br></pre></td></tr></table></figure><p>username 就是你的账户名，rep 就是你的仓库名。</p><p>4.将本地仓库更新内容推送到远程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin main #第一次提交加上-u参数，后续不需要</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git-bash命令</title>
      <link href="/LKFhnust18/2023/02/02/git-bash%E5%91%BD%E4%BB%A4/"/>
      <url>/LKFhnust18/2023/02/02/git-bash%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git-bash命令"><a href="#git-bash命令" class="headerlink" title="git-bash命令"></a>git-bash命令</h2><h3 id="git-bash简介"><a href="#git-bash简介" class="headerlink" title="git bash简介"></a>git bash简介</h3><p>在开始之前，首先了解<strong>git bash</strong>是什么？</p><blockquote><p>在windows安装<strong>git</strong>时，就会安装<strong>git bash</strong>，<strong>git bash</strong>是windows系统下的命令行工具，基于<strong>msys GNU</strong>环境，有<strong>git</strong>分布式版本控制工具。关于GNU环境，就是和<strong>Linux&#x2F;unix</strong>的环境一样，里面就是我们熟悉的linux工具，<strong>tar、grep、awk</strong>等，并且可以安装编译环境gcc、make等。</p></blockquote><h3 id="git-bash打开操作"><a href="#git-bash打开操作" class="headerlink" title="git bash打开操作"></a>git bash打开操作</h3><p>怎么打开<strong>git bash</strong>打开本地文件夹？</p><p>正常在安装<strong>git</strong>后，你可供选择方式就多了，主要有以下两种：</p><ul><li>不管在桌面找到<strong>Git bash</strong>、还是在<strong>开始</strong>里面，又或者是在搜索里面找到，点击图标就行，运行后使用<strong>cd</strong>命令，输入你想要达到的文件路径就行。(这里注意的点就是使用<strong>cd</strong>命令时使用斜线<strong>“&#x2F;”</strong>，而不是反斜线<strong>“\”</strong>)</li><li>在你想到达的文件路径里面输入<code>git bash</code>就能打开（前提是实现已经把<strong>git bash</strong>添加到<strong>path</strong> 中），又或是在文件空白区域右击选择<strong>GIt Bash Here</strong>，就能直接到你想要到达的文件路径。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/image-20230202105222112.png" alt="image-20230202105222112"></p><h3 id="git-bash常见命令"><a href="#git-bash常见命令" class="headerlink" title="git bash常见命令"></a>git bash常见命令</h3><table><thead><tr><th align="center">命令</th><th align="center"><strong>功能</strong></th></tr></thead><tbody><tr><td align="center">touch</td><td align="center">新建文件</td></tr><tr><td align="center">mkdir</td><td align="center">新建目录</td></tr><tr><td align="center">rm</td><td align="center">删除文件</td></tr><tr><td align="center">rm -r</td><td align="center">删除文件夹</td></tr><tr><td align="center">mv</td><td align="center">移动文件夹</td></tr><tr><td align="center">ls</td><td align="center">列出文件夹</td></tr><tr><td align="center">pwd</td><td align="center">打印工作目录</td></tr><tr><td align="center">cd</td><td align="center">改变目录</td></tr><tr><td align="center">reset</td><td align="center">重新初始化终端&#x2F;清屏</td></tr><tr><td align="center">history</td><td align="center">查看命令历史</td></tr><tr><td align="center">help</td><td align="center">帮助</td></tr><tr><td align="center">exit</td><td align="center">退出</td></tr></tbody></table><h3 id="git-bash常见的快捷键"><a href="#git-bash常见的快捷键" class="headerlink" title="git bash常见的快捷键"></a>git bash常见的快捷键</h3><h4 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h4><p>最简单有效的方法就是在<strong>git bash</strong>里面右击，有<code>copy和paste</code>选项。</p><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Ctrl+Shift+C或Ctrl+Insert</td><td align="center">复制</td></tr><tr><td align="center">Ctrl+Shift+S或Shift+Insert</td><td align="center">粘贴</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h4 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h4><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">Home或Ctrl+A</td><td align="center">跳转至行首</td></tr><tr><td align="center">End或Ctrl+E</td><td align="center">跳转至行尾</td></tr><tr><td align="center">Ctrl+X</td><td align="center">行首&#x2F;当前位置光标跳转</td></tr></tbody></table><p>其他的没有实际用处，这里还有一个<strong>清屏</strong>的快捷键：<code>Ctrl+L</code>。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库安装</title>
      <link href="/LKFhnust18/2023/01/19/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"/>
      <url>/LKFhnust18/2023/01/19/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL数据库安装"><a href="#MySQL数据库安装" class="headerlink" title="MySQL数据库安装"></a>MySQL数据库安装</h2><h3 id="一、下载MySQL数据库"><a href="#一、下载MySQL数据库" class="headerlink" title="一、下载MySQL数据库"></a>一、下载MySQL数据库</h3><blockquote><p>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。Linux作为操作系统，Apache 或Nginx作为 Web 服务器，MySQL 作为数据库，PHP&#x2F;Perl&#x2F;Python作为服务器端脚本解释器，就可以建立起一个稳定、免费的网站系统，被业界称为“LAMP“或“LNMP”组合。</p></blockquote><p><strong>官网下载，MySQL官网地址：<a href="https://dev.mysql.com/downloads/installer/">https://dev.mysql.com/downloads/installer/</a></strong></p><p>进入后显示显示画面如下图，有两种下载方式：一种是在线联网安装方式，一种是离线本地安装。<br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117111427954-471145526.png" alt="img"><br>这里在选择<strong>Download</strong>下载后，跳转的页面会询问你是否登录，这里不用等录，直接点击<strong>No thanks,just start my download</strong><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117112325608-1756119180.png" alt="img"></p><p><strong>还有一种压缩包下载方式，网址：<a href="https://dev.mysql.com/downloads/mysql/5.5.html#downloads">https://dev.mysql.com/downloads/mysql/5.5.html#downloads</a></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117112722989-1887774282.png" alt="img"></p><h3 id="二、安装MySQL数据库"><a href="#二、安装MySQL数据库" class="headerlink" title="二、安装MySQL数据库"></a>二、安装MySQL数据库</h3><h4 id="MySQL离线本地安装包安装就是傻瓜式安装，一直next"><a href="#MySQL离线本地安装包安装就是傻瓜式安装，一直next" class="headerlink" title="MySQL离线本地安装包安装就是傻瓜式安装，一直next"></a>MySQL离线本地安装包安装就是傻瓜式安装，一直next</h4><p><strong>点击安装包界面，会弹出如下界面，这里默认配置，点击<code>next</code>就行</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120113615870-839459251.png" alt="img"></p><p><strong>展示安装MySQL的要求，你不满足的话，按钮是<code>Execute</code>，。反之，则是<code>next</code>，点击中间按钮即可</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120114420723-1742899806.png" alt="img"></p><p><strong>接下来<code>next</code>就行</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120114720732-1515140083.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120114746623-273742398.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120114820998-1103004985.png" alt="img"></p><p><strong>然后输入 MySQL 的 root 密码，设置完密码之后点击<code>next</code>。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120114944739-1132377535.png" alt="img"></p><p><strong>这里服务名称默认为 MySQL80,我改了服务名为</strong>MySQL<strong>，点击<code>next</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120115126904-76838917.png" alt="img"></p><p><strong>安装这些配置，点击<code>Execute</code></strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120115232802-1938030.png" alt="img"></p><p><strong>这里的这些不需再继续配置，点击<code>Cancel</code>，到此MySQL安装完成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230120115453958-554263672.png" alt="img"></p><h4 id="采用压缩包解压的安装过程如下"><a href="#采用压缩包解压的安装过程如下" class="headerlink" title="采用压缩包解压的安装过程如下"></a>采用压缩包解压的安装过程如下</h4><p><strong>解压压缩包到你想安装的路径，我这里解压的路径为C:\Program Files＼C:\Program Files\mysql-8.0.31-winx64，压缩包内文件如下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117113623181-1564036366.png" alt="img"></p><p><strong>配置系统环境变量，点击</strong><code>path</code> **</p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117143751961-1686532531.png" alt="img"></p><p><strong>编辑path变量,添加MySQL安装目录下bin文件的路径，我这里是C:\Program Files＼C:\Program Files\mysql-8.0.31-winx64\bin</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117144459226-1516439253.png" alt="img"></p><p><strong>环境配置完成后，打开MySQL的安装目录，创建一个文件后缀名为.ini的my.ini空白文件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117144938204-2132507475.png" alt="img"></p><p><strong>编辑my.ini文件，用户初始化MySQL数据库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir = D:\\mysql\\mysql-8.0.17-winx64</span><br><span class="line"># 设置mysql数据库的数据的存放目录</span><br><span class="line">datadir = D:\\mysql\\mysql-8.0.17-winx64\\data</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"># 创建模式</span><br><span class="line">sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br></pre></td></tr></table></figure><p><strong>在MySQL安装目录下的bin目录下的路径输入框输入cmd,并输入<code>mysqld --initialize</code>,进行初始化，然后在MySQL的安装目录下就会出现一个data的文件夹</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117151630906-1475092417.png" alt="img"><br><strong>初始化完成后，里面生成一个.err的文件,里面含有登录mysql的密码，</strong><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117151949833-2015302970.png" alt="img"><br><strong>找到root和初始root密码</strong><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117152307124-1007023764.png" alt="img"><br><strong>提示</strong>：<br><strong>如果先前在电脑中安装过MySQL，请在命令行里面输入<code>sc delete mysql</code>删除之前的mysql服务</strong>。</p><p><strong>在命令行窗口输入<code>mysqld --install</code>命令，安装mysql服务</strong></p><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117153318541-415712951.png" alt="img"><br><strong>接下来，输入<code>net start mysql</code>,启动mysql服务，输入<code>mysql -uroot -p</code>，然后输入你的密码。出现如图所示算成功。</strong><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117154917867-122330170.png" alt="img"><br><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo/img/3076173-20230117154938811-385295660.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习笔记——数组</title>
      <link href="/LKFhnust18/2023/01/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/"/>
      <url>/LKFhnust18/2023/01/06/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E2%80%94%E2%80%94%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习笔记——数组"><a href="#Java学习笔记——数组" class="headerlink" title="Java学习笔记——数组"></a>Java学习笔记——数组</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p><strong>为什么需要数组？</strong><br>有这样一个问题：一个养鸡场有6只鸡，它们的体重分别是3kg,5kg,1kg,3.4kg,2kg,50kg。请问这六只鸡的总体重是多少?平均体重是多少?请你编写一个程序。<br>对于这样的问题，求解的思路：定义六个变量，加起来算出总体重，再求出平均体重。<br>传统方法求解：Array01.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//定义六只小鸡的重量</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken1</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken2</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken3</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken4</span> <span class="operator">=</span> <span class="number">3.4</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken5</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">       <span class="type">double</span> <span class="variable">chicken6</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//六只小鸡的总重量</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">totalWeight</span> <span class="operator">=</span> chicken1 + chicken2 + chicken3 + chicken4 + chicken5 + chicken6;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//六只小鸡的平均体重</span></span><br><span class="line">       <span class="type">double</span> <span class="variable">avgWeight</span> <span class="operator">=</span> totalWeight / <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;六只小鸡的总体重=&quot;</span>+avgWeight);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>显而易见的，现在还只定义六只小鸡的重量，假如有一百只、一千只，那该怎么办呢？所以传统方法解决没有灵活性。</p><h2 id="二、数组的快速入门"><a href="#二、数组的快速入门" class="headerlink" title="二、数组的快速入门"></a>二、数组的快速入门</h2><h3 id="1-数组介绍"><a href="#1-数组介绍" class="headerlink" title="1.数组介绍"></a>1.数组介绍</h3><p>数组可以存放同一类型的数据，数组也是一种数据类型，是引用数据类型。</p><h3 id="2-数组的快速入门"><a href="#2-数组的快速入门" class="headerlink" title="2.数组的快速入门"></a>2.数组的快速入门</h3><p>在<strong>Array02.java</strong>中用数组解决上述<strong>Aaary01.java</strong>的问题，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Array02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">totalWeight</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="type">double</span>[] chicken = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3.4</span>, <span class="number">2</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历循环数组，得到数组所有元素的和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chicken.length; i++) &#123;</span><br><span class="line">            totalWeight += chicken[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;总重量=&quot;</span> + totalWeight + <span class="string">&quot;\t\t&quot;</span> + <span class="string">&quot;平均体重=&quot;</span> + (totalWeight/chicken.length));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组相较于传统方法，可以使用for循环进行遍历，极大节省了时间。</p><h2 id="三、数组的使用"><a href="#三、数组的使用" class="headerlink" title="三、数组的使用"></a>三、数组的使用</h2><h3 id="1-动态初始化"><a href="#1-动态初始化" class="headerlink" title="1.动态初始化"></a>1.动态初始化</h3><p>(1) 数组的定义</p><blockquote><p>数据类型  数组名[] &#x3D; new 数据类型[大小]</p></blockquote><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];<span class="comment">//创建一个数组，名字为a，存放5个int</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/LKFhnust18/picgo@main/img/20230608112656.png" alt="img"></p><p>(2) 数组的使用</p><p>数组名[下标&#x2F;索引] 比如：你要使用a数组的第三个数 a[2]</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
